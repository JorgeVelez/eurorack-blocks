/*****************************************************************************

      DoubleBuffer.hpp
      Copyright (c) 2020 Raphael DINGE

*Tab=3***********************************************************************/



#pragma once



/*\\\ INCLUDE FILES \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/



namespace erb
{



/*\\\ PUBLIC \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

/*
==============================================================================
Name : operator Buffer
==============================================================================
*/

DoubleBuffer::operator Buffer () const
{
   return _buffers [_cur_buf];
}



/*
==============================================================================
Name : operator =
==============================================================================
*/

DoubleBuffer & DoubleBuffer::operator = (const Buffer & buffer)
{
   _buffers [_cur_buf] = buffer;

   return *this;
}



/*
==============================================================================
Name : size
==============================================================================
*/

size_t   DoubleBuffer::size () const
{
   return _buffers [_cur_buf].size ();
}



/*
==============================================================================
Name : operator []
==============================================================================
*/

float &  DoubleBuffer::operator [] (size_t index)
{
   return _buffers [_cur_buf][index];
}


/*
==============================================================================
Name : operator []
==============================================================================
*/

const float &  DoubleBuffer::operator [] (size_t index) const
{
   return _buffers [_cur_buf][index];
}



/*
==============================================================================
Name : push
==============================================================================
*/

void  DoubleBuffer::push (float spl)
{
   _buffers [1 - _cur_buf][_cur_index] = spl;
   ++_cur_index;
}



/*
==============================================================================
Name : pull
==============================================================================
*/

float VcvAudioOutDaisy::pull ()
{
   float spl = _buffers [1 - _cur_buf][_cur_index];
   ++_cur_index;

   return spl;
}



/*
==============================================================================
Name : swap
==============================================================================
*/

void  DoubleBuffer::swap ()
{
   _cur_buf = 1 - _cur_buf;
   _cur_index = 0;
}



/*\\\ PROTECTED \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/



/*\\\ PRIVATE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/



}  // namespace erb



/*\\\ EOF \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
